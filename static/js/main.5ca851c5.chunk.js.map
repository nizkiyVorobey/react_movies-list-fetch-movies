{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","constants/getMovieConstants.ts","api/getNewMovie.ts","components/FindMovie/FindMovie.tsx","index.tsx","App.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","API_BASE_URL","a","fetch","response","json","data","Response","Error","FindMovie","addNewMovie","useState","filedValue","setFiledValue","isLoaded","setIsLoaded","errorMessage","setErorMessage","newMovie","setNewMovie","getMovie","getNewMovie","then","Title","Plot","Poster","imdbID","catch","errorMessageClasses","classNames","length","inputWithErrorClasses","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","onChange","target","value","onClick","every","checkSameMovie","ReactDOM","render","setMovies","document","getElementById"],"mappings":"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","file":"static/js/main.5ca851c5.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","export const TITLE_BASE_URL = 'https://www.imdb.com/title/';\nexport const API_BASE_URL = 'https://www.omdbapi.com/?apikey=7d946cd0&t=';\n\n","import { API_BASE_URL } from '../constants/getMovieConstants';\n\nexport async function getNewMovie(movie: string): Promise<NewMovie> {\n  const response = await fetch(`${API_BASE_URL}${movie}`);\n  const data: ImdbResponse = await response.json();\n\n  if (data.Response === 'False') {\n    throw new Error(data.Error);\n  }\n\n  return data as unknown as NewMovie;\n}\n","import React, { ChangeEvent, useState, FC } from 'react';\nimport classNames from 'classnames/bind';\nimport './FindMovie.scss';\nimport { getNewMovie } from '../../api/getNewMovie';\nimport { TITLE_BASE_URL } from '../../constants/getMovieConstants';\n\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  addNewMovie: any;\n  movies: Movie[];\n}\n\nconst checkSameMovie = (movies: Movie[], newMovie: Movie): boolean => {\n  return movies.every(movie => movie.imdbId !== newMovie.imdbId);\n};\n\nexport const FindMovie: FC<Props> = ({ addNewMovie, movies }) => {\n  const [filedValue, setFiledValue] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [errorMessage, setErorMessage] = useState('');\n  const [newMovie, setNewMovie] = useState<Movie>({});\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setFiledValue(event.target.value);\n  };\n\n  const getMovie = () => {\n    getNewMovie(filedValue)\n      .then(movie => {\n        setNewMovie({\n          title: movie.Title,\n          description: movie.Plot,\n          imgUrl: movie.Poster,\n          imdbUrl: `${TITLE_BASE_URL}${movie.imdbID}`,\n          imdbId: movie.imdbID,\n        });\n        setIsLoaded(true);\n        setErorMessage('');\n      })\n      .catch(() => {\n        setIsLoaded(false);\n        setErorMessage('we didn\\'t find any movie');\n      });\n  };\n\n  const handleSubmit = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    getMovie();\n  };\n\n  const addMovie = () => {\n    setFiledValue('');\n\n    if (isLoaded) {\n      if (checkSameMovie(movies, newMovie)) {\n        addNewMovie([...movies, newMovie]);\n        setNewMovie({});\n        setIsLoaded(false);\n      } else {\n        setErorMessage('Movie has been added already');\n      }\n    } else {\n      setErorMessage('There are not movie for adding');\n    }\n  };\n\n  const errorMessageClasses = classNames('help', 'is-danger', 'display-none', { 'display-inline': errorMessage.length > 0 });\n  const inputWithErrorClasses = classNames('input', { 'is-danger': errorMessage.length > 0 });\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={ inputWithErrorClasses }\n              onChange={handleChange}\n              value={filedValue}\n            />\n          </div>\n\n          <p className={errorMessageClasses}>\n            {errorMessage}\n          </p>\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={getMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={addMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {isLoaded ? <MovieCard {...newMovie} /> : null}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addNewMovie={setMovies} movies={movies} />\n      </div>\n    </div>\n  );\n};\n"],"sourceRoot":""}